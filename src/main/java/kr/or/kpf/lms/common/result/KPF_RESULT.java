package kr.or.kpf.lms.common.result;

import kr.or.kpf.lms.framework.exception.KPFException;

import java.util.Arrays;

/**
 * 서버 응답 코드
 */
public enum KPF_RESULT {
	EMPTY("", ""),

	SUCCESS("0000", "성공"),
	ERROR0001("0001", "회원 인증에 실패하였습니다."),

	/** 회원 가입 */
	ERROR1001("1001", "회원 정보 생성에 실패하였습니다."),
	ERROR1002("1002", "이미 존재하는 회원 정보입니다."),
	ERROR1003("1003", "회원 정보 변경에 실패하였습니다."),
	ERROR1004("1004", "회원 정보 조회에 실패하였습니다."),
	ERROR1005("1005", "회원 정보 삭제에 실패하였습니다."),
	ERROR1006("1006", "이용 약관 처리에 실패하였습니다."),

	/** */
	ERROR1031("1031", "기관 정보 생성에 실패하였습니다."),
	ERROR1032("1032", "이미 존재하는 기관 정보입니다."),
	ERROR1033("1033", "기관 정보 변경에 실패하였습니다."),
	ERROR1061("1061", "사업 참여 권한 신청에 실패하였습니다."),
	ERROR1062("1062", "이미 존재하는 사업 참여 권한 신청입니다."),
	ERROR1063("1063", "사업 참여 권한 신청 변경에 실패하였습니다."),

	/** 기관 */
	ERROR1201("1201", "기관 정보 생성에 실패하였습니다."),
	ERROR1202("1202", "기관 정보 업데이트에 실패하였습니다."),
	ERROR1203("1203", "이미 존재하는 기관 정보입니다."),
	ERROR1204("1204", "존재하지 않는 기관 정보입니다."),

	/** 콘텐츠 */
	ERROR2001("2001", "콘텐츠 정보 생성에 실패하였습니다."),
	ERROR2002("2002", "이미 존재하는 콘텐츠 정보입니다."),
	ERROR2003("2003", "콘텐츠 정보 변경에 실패하였습니다."),
	ERROR2004("2004", "콘텐츠 정보가 존재하지 않습니다."),
	ERROR2005("2005", "콘텐츠 폴더/파일 관리에 실패하였습니다."),
	ERROR2006("2006", "폴더명 변경에 실패하였습니다.(폴더 이동으로 요청해주세요.)"),
	ERROR2007("2007", "폴더 이동에 실패하였습니다.(폴더명 변경으로 요청해주세요.)"),
	ERROR2008("2008", "요청 폴더가 존재하지 않습니다."),
	ERROR2009("2009", "이미 존재하는 폴더입니다."),
	ERROR2010("2010", "파일 찾기에 실패하였습니다."),

	/** 강의 평가 */
	ERROR2021("2021", "강의 평가 정보 생성에 실패하였습니다."),
	ERROR2022("2022", "이미 존재하는 강의 평가 정보입니다."),
	ERROR2023("2023", "강의 평가 정보 변경에 실패하였습니다."),
	ERROR2024("2024", "강의 평가 정보가 존재하지 않습니다."),

	/** 챕터 */
	ERROR2041("2041", "챕터 정보가 존재하지 않습니다."),
	ERROR2042("2042", "챕터 정보가 생성에 실패하였습니다."),
	ERROR2043("2043", "챕터 정보가 업데이트에 실패하였습니다."),
	ERROR2044("2044", "이미 존재하는 챕터 정보입니다."),
	ERROR2045("2045", "챕터 정보 삭제에 실패하였습니다."),

	/** 강의 평가 질문 */
	ERROR2061("2061", "강의 평가 질문 생성에 실패하였습니다."),
	ERROR2062("2062", "이미 존재하는 강의 평가 질문 정보입니다."),
	ERROR2063("2063", "강의 평가 질문 정보가 존재하지 않습니다."),
	ERROR2065("2065", "강의 평가 질문 생성 시 문항 정보는 필수입니다."),
	ERROR2066("2066", "강의 평가 질문 업데이트에 실패하였습니다."),
	ERROR2067("2067", "강의 평가 질문 삭제에 실패하였습니다."),

	/** 섹션 */
	ERROR2081("2081", "섹션(절) 정보가 존재하지 않습니다."),
	ERROR2082("2082", "섹션(절) 정보가 생성에 실패하였습니다."),
	ERROR2083("2083", "섹션(절) 정보가 업데이트에 실패하였습니다."),
	ERROR2084("2084", "이미 존재하는 섹션(절) 정보입니다."),
	ERROR2085("2085", "섹션(절) 정보 삭제에 실패하였습니다."),

	/** 교육 과정 */
	ERROR3001("3001", "교육 과정 정보 생성에 실패하였습니다."),
	ERROR3002("3002", "이미 존재하는 교육 과정 정보입니다."),
	ERROR3003("3003", "교육 과정 정보 변경에 실패하였습니다."),
	ERROR3004("3004", "존재하지 않는 교육 과정 정보입니다."),

	/** 교육 과정 지원 */
	ERROR3021("3021", "교육 과정 지원에 실패하였습니다."),
	ERROR3022("3022", "교육 과정 조회에 실패하였습니다."),
	ERROR3023("3023", "교육 과정 지원 이력이 존재합니다."),
	ERROR3024("3024", "교육 과정 지원 변경에 실패하였습니다."),
	ERROR3025("3025", "교육 과정 지원 이력이 존재하지 않습니다."),
	ERROR3026("3026", "교육 과정 수료 처리에 실패하였습니다."),
	ERROR3027("3027", "이러닝 교육은 챕터만 수료/미수료 처리가 가능합니다."),
	ERROR3028("3028", "시험 응시 내역 초기화에 실패하였습니다."),

	/** 교육 과정 시험 */
	ERROR3041("3041", "시험 정보 생성에 실패하였습니다."),
	ERROR3042("3042", "이미 존재하는 시험 정보입니다."),
	ERROR3043("3043", "시험 정보 변경에 실패하였습니다."),
	ERROR3044("3044", "존재하지 않는 시험 정보입니다."),
	ERROR3045("3045", "이미 사용중인 시험이 있습니다."),

	/** 교육 과정 일정 */
	ERROR3061("3061", "교육 일정 생성에 실패하였습니다."),
	ERROR3062("3062", "동일한 교육 일정 이력이 존재합니다."),
	ERROR3063("3063", "동일한 교육 일정 변경에 실패하였습니다."),
	ERROR3064("3064", "존재하지 않는 교육 일정 입니다."),
	ERROR3065("3065", "유효하지 않는 강사 정보입니다."),
	ERROR3066("3066", "복습 가능 시 복습 가능 기간은 필수입니다."),
	ERROR3067("3067", "화상 강의 진행 시 화상 강의 경로는 필수입니다."),

	/** 교육 과정 시험 문제 */
	ERROR3081("3081", "시험 문제 정보 생성에 실패하였습니다."),
	ERROR3082("3082", "이미 존재하는 시험 문제 정보입니다."),
	ERROR3083("3083", "시험 문제 정보 변경에 실패하였습니다."),
	ERROR3084("3084", "요청 문항에 정답이 존재하지 않습니다."),
	ERROR3085("3085", "시험 문제 생성 시 문항 정보는 필수입니다."),
	ERROR3086("3086", "시험 문제 삭제에 실패하였습니다."),
	ERROR3087("3087", "존재하지 않는 시험 문제 정보입니다."),

	/** 교육 과정 시험 문제 문항 */
	ERROR3091("3091", "존재하지 않는 시험 문제 문항입니다."),



	/** 사업 공고 */
	ERROR3501("3501", "사업 공고 생성에 실패하였습니다."),
	ERROR3502("3502", "이미 존재하는 사업 공고 정보입니다."),
	ERROR3503("3503", "사업 공고 변경에 실패하였습니다."),
	ERROR3504("3504", "사업 공고 삭제에 실패하였습니다."),
	ERROR3505("3505", "존재하지 않는 사업 공고 정보입니다."),
	ERROR3506("3506", "사업 공고 일련 번호 정보는 필수입니다."),
	ERROR3507("3507", "이미 삭제된 사업 공고 정보입니다."),

	/** 사업 공고 결과 */
	ERROR3521("3521", "사업 공고 결과 생성에 실패하였습니다."),
	ERROR3522("3522", "이미 존재하는 사업 공고 결과 정보입니다."),
	ERROR3523("3523", "사업 공고 결과 변경에 실패하였습니다."),
	ERROR3524("3524", "사업 공고 결과 삭제에 실패하였습니다."),
	ERROR3525("3525", "존재하지 않는 사업 공고 결과 정보입니다."),
	ERROR3526("3526", "사업 공고 결과 일련 번호 정보는 필수입니다."),
	ERROR3527("3527", "이미 삭제된 사업 공고 결과 정보입니다."),

	/** 사업 공고 기업 신청 */
	ERROR3541("3541", "사업 공고 신청에 실패하였습니다."),
	ERROR3542("3542", "이미 존재하는 사업 공고 신청 정보입니다."),
	ERROR3543("3543", "사업 공고 신청 변경에 실패하였습니다."),
	ERROR3544("3544", "사업 공고 신청 삭제에 실패하였습니다."),
	ERROR3545("3545", "존재하지 않는 사업 공고 신청 정보입니다."),
	ERROR3546("3546", "사업 공고 신청 일련 번호 정보는 필수입니다."),
	ERROR3547("3547", "이미 삭제된 사업 공고 신청 정보입니다."),

	/** 사업 공고 기업 신청 - 수업계획 */
	ERROR3561("3561", "수업 계획 생성에 실패하였습니다."),
	ERROR3562("3562", "이미 존재하는 수업 계획 생성 정보입니다."),
	ERROR3563("3563", "수업 계획 변경에 실패하였습니다."),
	ERROR3564("3564", "수업 계획 삭제에 실패하였습니다."),
	ERROR3565("3565", "존재하지 않는 수업 계획 정보입니다."),
	ERROR3566("3566", "수업 계획 일련 번호 정보는 필수입니다."),
	ERROR3567("3567", "이미 삭제된 수업 계획 정보입니다."),

	/** 상호 평가 */
	ERROR3581("3581", "상호 평가 생성에 실패하였습니다."),
	ERROR3582("3582", "이미 존재하는 상호 평가 생성 정보입니다."),
	ERROR3583("3583", "상호 평가 변경에 실패하였습니다."),
	ERROR3584("3584", "상호 평가 삭제에 실패하였습니다."),
	ERROR3585("3585", "존재하지 않는 상호 평가 정보입니다."),
	ERROR3586("3586", "상호 평가 일련 번호 정보는 필수입니다."),
	ERROR3587("3587", "이미 삭제된 상호 평가 정보입니다."),

	/** 강사 공고 */
	ERROR3601("3601", "강사 공고 생성에 실패하였습니다."),
	ERROR3602("3602", "이미 존재하는 강사 공고 생성 정보입니다."),
	ERROR3603("3603", "강사 공고 변경에 실패하였습니다."),
	ERROR3604("3604", "강사 공고 삭제에 실패하였습니다."),
	ERROR3605("3605", "존재하지 않는 강사 공고 정보입니다."),
	ERROR3606("3606", "강사 공고 일련 번호 정보는 필수입니다."),
	ERROR3607("3607", "이미 삭제된 강사 공고 정보입니다."),
	ERROR3608("3608", "강사 공고 신청 정보가 존재하여 삭제에 실패하였습니다."),

	/** 강사 신청 */
	ERROR3611("3611", "강사 신청에 실패하였습니다."),
	ERROR3612("3612", "이미 존재하는 강사 신청 정보입니다."),
	ERROR3613("3613", "강사 신청 변경에 실패하였습니다."),
	ERROR3614("3614", "강사 신청 삭제에 실패하였습니다."),
	ERROR3615("3615", "존재하지 않는 강사 신청 정보입니다."),
	ERROR3616("3616", "강사 신청 일련 번호 정보는 필수입니다."),
	ERROR3617("3617", "이미 삭제된 강사 신청 정보입니다."),

	/** 강사 거리증빙 */
	ERROR3621("3621", "강사 거리증빙 생성에 실패하였습니다."),
	ERROR3622("3622", "이미 존재하는 강사 거리증빙 정보입니다."),
	ERROR3623("3623", "강사 거리증빙 변경에 실패하였습니다."),
	ERROR3624("3624", "강사 거리증빙 삭제에 실패하였습니다."),
	ERROR3625("3625", "존재하지 않는 강사 거리증빙 정보입니다."),
	ERROR3626("3626", "강사 거리증빙 일련 번호 정보는 필수입니다."),
	ERROR3627("3627", "이미 삭제된 강사 거리증빙 정보입니다."),

	/** 강사 강의확인서 */
	ERROR3631("3631", "강사 강의확인서 생성에 실패하였습니다."),
	ERROR3632("3632", "이미 존재하는 강사 강의확인서 정보입니다."),
	ERROR3633("3633", "강사 강의확인서 변경에 실패하였습니다."),
	ERROR3634("3634", "강사 강의확인서 삭제에 실패하였습니다."),
	ERROR3635("3635", "존재하지 않는 강사 강의확인서 정보입니다."),
	ERROR3636("3636", "강사 강의확인서 일련 번호 정보는 필수입니다."),
	ERROR3637("3637", "이미 삭제된 강사 강의확인서 정보입니다."),

	/** 결과보고서 */
	ERROR3641("3641", "결과보고서 생성에 실패하였습니다."),
	ERROR3642("3642", "이미 존재하는 결과보고서 정보입니다."),
	ERROR3643("3643", "결과보고서 변경에 실패하였습니다."),
	ERROR3644("3644", "결과보고서 삭제에 실패하였습니다."),
	ERROR3645("3645", "존재하지 않는 결과보고서 정보입니다."),
	ERROR3646("3646", "결과보고서 일련 번호 정보는 필수입니다."),
	ERROR3647("3647", "이미 삭제된 결과보고서 정보입니다."),

	/** 상호 평가 응답 */
	ERROR3661("3661", "상호 평가 응답 생성에 실패하였습니다."),
	ERROR3662("3662", "이미 존재하는 상호 평가 응답 생성 정보입니다."),
	ERROR3663("3663", "상호 평가 응답 변경에 실패하였습니다."),
	ERROR3664("3664", "상호 평가 응답 삭제에 실패하였습니다."),
	ERROR3665("3665", "존재하지 않는 상호 평가 응답 정보입니다."),
	ERROR3666("3666", "상호 평가 응답 일련 번호 정보는 필수입니다."),
	ERROR3667("3667", "이미 삭제된 상호 평가 응답 정보입니다."),



	/** 마이 페이지 */
	ERROR4001("4001", "수업지도안 생성에 실패하였습니다."),
	ERROR4002("4002", "이미 존재하는 수업지도안 입니다."),
	ERROR4003("4003", "수업지도안 변경에 실패하였습니다."),
	ERROR4005("4005", "존재하지 않는 수업지도안 입니다."),
	ERROR4007("4007", "이미 삭제된 수업지도안 입니다."),

	ERROR7001("7001", "공통 코드 생성에 실패하였습니다."),
	ERROR7002("7002", "이미 존재하는 코드 정보입니다."),
	ERROR7003("7003", "공통 코드 변경에 실패하였습니다."),

	/** 1:1 문의 */
	ERROR7021("7021", "1:1 문의 등록에 실패하였습니다."),
	ERROR7022("7022", "1:1 문의 이력이 존재하지 않습니다."),
	ERROR7023("7023", "1:1 문의 업데이트에 실패하였습니다."),

	/** 공지사항 */
	ERROR7041("7041", "공지사항 이력이 존재하지 않습니다."),
	ERROR7042("7042", "공지사항 조회수 업데이트에 실패하였습니다."),
	ERROR7043("7043", "공지사항 생성에 실패하였습니다."),
	ERROR7044("7044", "이미 삭제된 공지사항 입니다."),

	/** 자주묻는 질문 */
	ERROR7061("7061", "자주묻는 질문 생성에 실패하였습니다."),
	ERROR7062("7062", "자주묻는 질문 업데이트에 실패하였습니다."),
	ERROR7063("7063", "자주묻는 질문 삭제에 실패하였습니다."),
	ERROR7064("7064", "자주묻는 질문이 존재하지 않습니다."),

	/** 교육 주제 제안 */
	ERROR7081("7081", "교육 주제 제안 생성에 실패하였습니다."),
	ERROR7082("7082", "교육 주제 제안 업데이트에 실패하였습니다."),
	ERROR7083("7083", "교육 주제 제안 삭제에 실패하였습니다."),
	ERROR7084("7084", "교육 주제 제안이 존재하지 않습니다."),
	ERROR7085("7085", "교육 주제 제안 조회수 업데이트에 실패하였습니다."),

	/** 교육 후기 */
	ERROR7101("7101", "교육 후기 생성에 실패하였습니다."),
	ERROR7102("7102", "교육 후기 업데이트에 실패하였습니다."),
	ERROR7103("7103", "교육 후기 삭제에 실패하였습니다."),
	ERROR7104("7104", "교육 후기가 존재하지 않습니다."),
	ERROR7105("7105", "교육 후기 조회수 업데이트에 실패하였습니다."),

	/** 이벤트/설문 */
	ERROR7121("7121", "이벤트/설문 생성에 실패하였습니다."),
	ERROR7122("7122", "이벤트/설문 업데이트에 실패하였습니다."),
	ERROR7123("7123", "이벤트/설문 삭제에 실패하였습니다."),
	ERROR7124("7124", "이벤트/설문이 존재하지 않습니다."),
	ERROR7125("7125", "이벤트/설문 조회수 업데이트에 실패하였습니다."),

	/** 유저 관리 */
	ERROR8001("8001", "권한 정보 생성에 실패하였습니다."),
	ERROR8002("8002", "이미 존재하는 권한 정보입니다."),
	ERROR8003("8003", "권한 정보 수정에 실패하였습니다."),
	ERROR8004("8004", "존재하지 않는 권한 정보 입니다."),

	ERROR8101("8101", "강사 정보 생성에 실패하였습니다."),
	ERROR8102("8102", "이미 존재하는 강사 정보입니다."),
	ERROR8103("8103", "강사 정보 수정에 실패하였습니다."),
	ERROR8104("8104", "존재하지 않는 강사 정보 입니다."),


	ERROR9001("9001", "필수 파라미터 누락입니다."),
	ERROR9002("9002", "지원하지 않는 요청 타입입니다."),
	ERROR9003("9003", "데이터 변경 및 파싱에 실패하였습니다."),
	ERROR9004("9004", "유효하지 않은 요청 파라미터입니다."),
	ERROR9005("9005", "파일 업로드에 실패하였습니다."),
	ERROR9006("9006", "파일 다운로드에 실패하였습니다."),
	ERROR9007("9007", "파일 삭제에 실패하였습니다."),
	ERROR9008("9008", "엑셀 다운로드에 실패하였습니다."),
	ERROR9009("9009", "존재하지 않는 정보 입니다."),
	ERROR9998("9998", "유효하지 않은 코드값 입니다."),
	ERROR9999("9999", "알 수 없는 오류가 발생하였습니다.");

	public final String code;
	public final String message;

	KPF_RESULT(String code, String message) {
		this.code = code;
		this.message = message;
	}

	public static KPF_RESULT valueOfCode(String maybeCode) {
		return Arrays.asList(KPF_RESULT.values()).stream()
				.filter(x -> x.code.equals(maybeCode) )
				.map(x -> KPF_RESULT.valueOf(x.name()))
				.findFirst()
				.orElseThrow(() -> new KPFException(KPF_RESULT.ERROR9999, "정의되지 않은 응답코드 입니다."));
	}
}
